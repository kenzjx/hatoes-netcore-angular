{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, forwardRef, Component, ViewEncapsulation, Optional, Self, ViewChild, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/forms';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nconst _c0 = [\"inputFile\"];\nconst _c1 = [\"inputValue\"];\n\nfunction NgxMatFileInputComponent_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 7);\n    i0.ɵɵtext(1, \"attach_file\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = [[[\"\", \"ngxMatFileInputIcon\", \"\"]]];\nconst _c3 = [\"[ngxMatFileInputIcon]\"];\nlet nextUniqueId = 0;\n\nconst _NgxMatInputMixinBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n});\n\nclass NgxMatFileInputIcon {}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatFileInputIcon.ɵfac = function NgxMatFileInputIcon_Factory(t) {\n  return new (t || NgxMatFileInputIcon)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatFileInputIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatFileInputIcon,\n  selectors: [[\"\", \"ngxMatFileInputIcon\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputIcon, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatFileInputIcon]'\n    }]\n  }], null, null);\n})();\n\nclass NgxMatFileInputComponent extends _NgxMatInputMixinBase {\n  constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._cd = _cd;\n    this.ngControl = ngControl;\n    this.color = 'primary';\n    this.fileNames = null;\n    this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\n    this.stateChanges = new Subject();\n    this.focused = false;\n    this.controlType = 'ngx-mat-file-input';\n    this.autofilled = false;\n    /** Function when touched */\n\n    this._onTouched = () => {};\n    /** Function when changed */\n\n\n    this._onChange = () => {};\n\n    this._disabled = false;\n    this._multiple = false;\n    this.placeholder = 'Choose a file';\n    this.separator = ',';\n    this._required = false;\n    this._readonly = true;\n    this.id = this.id;\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n  }\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  /**\r\n   * Limiting accepted file types\r\n   * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" — Accept PNG or JPEG files.\r\n   */\n\n\n  get accept() {\n    return this._accept;\n  }\n\n  set accept(value) {\n    this._accept = value;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    this._updateInputValue(value);\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /** Focuses the input. */\n\n\n  focus(options) {\n    this._inputValueRef.nativeElement.focus(options);\n  }\n\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n  /** Mark the field as touched */\n\n\n  _markAsTouched() {\n    this._onTouched();\n\n    this._cd.markForCheck();\n\n    this.stateChanges.next();\n  }\n\n  _isBadInput() {\n    let validity = this._inputValueRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n\n  get empty() {\n    return !this._inputValueRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  openFilePicker(event) {\n    this._inputFileRef.nativeElement.click();\n\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    this._markAsTouched();\n  }\n\n  handleFiles(filelist) {\n    if (filelist.length > 0) {\n      const files = new Array();\n\n      for (let i = 0; i < filelist.length; i++) {\n        files.push(filelist.item(i));\n      }\n\n      this._updateInputValue(files);\n\n      this._resetInputFile();\n\n      this._onChange(this.multiple ? files : files[0]);\n    }\n  }\n  /** Handles a click on the control's container. */\n\n\n  onContainerClick(event) {}\n\n  _resetInputFile() {\n    this._inputFileRef.nativeElement.value = \"\";\n  }\n\n  _updateInputValue(files) {\n    let text = null;\n\n    if (files) {\n      if (Array.isArray(files)) {\n        text = this._multiple ? files.map(x => x.name).join(this.separator) : files[0].name;\n      } else {\n        text = files.name != null ? files.name : null;\n      }\n    }\n\n    this._inputValueRef.nativeElement.value = text;\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatFileInputComponent.ɵfac = function NgxMatFileInputComponent_Factory(t) {\n  return new (t || NgxMatFileInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatFileInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatFileInputComponent,\n  selectors: [[\"ngx-mat-file-input\"]],\n  contentQueries: function NgxMatFileInputComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxMatFileInputIcon, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n    }\n  },\n  viewQuery: function NgxMatFileInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputFileRef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputValueRef = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-mat-file-input\"],\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    id: \"id\",\n    multiple: \"multiple\",\n    placeholder: \"placeholder\",\n    separator: \"separator\",\n    required: \"required\",\n    errorStateMatcher: \"errorStateMatcher\",\n    value: \"value\",\n    readonly: \"readonly\",\n    accept: \"accept\"\n  },\n  exportAs: [\"ngx-mat-file-input\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: forwardRef(() => NgxMatFileInputComponent)\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 8,\n  vars: 13,\n  consts: [[\"autocomplete\", \"off\", 1, \"mat-input-element\", \"mat-form-field-autofill-control\", 3, \"disabled\", \"required\"], [\"inputValue\", \"\"], [1, \"mat-form-field-suffix\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"type\", \"button\", 1, \"button-browse\", 3, \"color\", \"disabled\", \"click\"], [\"class\", \"ngx-mat-file-input--default-icon\", 4, \"ngIf\"], [\"type\", \"file\", 1, \"input-file\", 3, \"multiple\", \"accept\", \"change\"], [\"inputFile\", \"\"], [1, \"ngx-mat-file-input--default-icon\"]],\n  template: function NgxMatFileInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function NgxMatFileInputComponent_Template_button_click_3_listener($event) {\n        return ctx.openFilePicker($event);\n      });\n      i0.ɵɵtemplate(4, NgxMatFileInputComponent_mat_icon_4_Template, 2, 0, \"mat-icon\", 4);\n      i0.ɵɵprojection(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 5, 6);\n      i0.ɵɵlistener(\"change\", function NgxMatFileInputComponent_Template_input_change_6_listener($event) {\n        return ctx.handleFiles($event.target.files);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      i0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"disabled\", ctx.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"multiple\", ctx.multiple)(\"accept\", ctx.accept);\n    }\n  },\n  directives: [i4.MatButton, i6.MatSuffix, i7.NgIf, i5.MatIcon],\n  styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-file-input',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-file-input'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: forwardRef(() => NgxMatFileInputComponent)\n      }],\n      exportAs: 'ngx-mat-file-input',\n      template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\",\n      styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }];\n  }, {\n    _inputFileRef: [{\n      type: ViewChild,\n      args: ['inputFile', {\n        static: true\n      }]\n    }],\n    _inputValueRef: [{\n      type: ViewChild,\n      args: ['inputValue', {\n        static: true\n      }]\n    }],\n    _customIcon: [{\n      type: ContentChild,\n      args: [NgxMatFileInputIcon]\n    }],\n    color: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    accept: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxMatFileInputModule {}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatFileInputModule.ɵfac = function NgxMatFileInputModule_Factory(t) {\n  return new (t || NgxMatFileInputModule)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxMatFileInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatFileInputModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nNgxMatFileInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatButtonModule, MatIconModule, MatFormFieldModule, MatInputModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatFileInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxMatFileInputComponent, NgxMatFileInputIcon],\n      imports: [CommonModule, MatButtonModule, MatIconModule, MatFormFieldModule, MatInputModule],\n      exports: [NgxMatFileInputComponent, NgxMatFileInputIcon]\n    }]\n  }], null, null);\n})();\n\nfunction calculFileSize(number) {\n  if (number < 1024) {\n    return number + 'bytes';\n  } else if (number >= 1024 && number < 1048576) {\n    return (number / 1024).toFixed(1) + 'KB';\n  } else if (number >= 1048576) {\n    return (number / 1048576).toFixed(1) + 'MB';\n  }\n}\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\n\n\nfunction MaxSizeValidator(max) {\n  return ctrl => {\n    max = Number(max);\n\n    if (isNaN(max)) {\n      throw 'MaxSizeValidator: max of size of file is invalid';\n    }\n\n    if (!ctrl.value) return null;\n    let files = ctrl.value;\n\n    if (!Array.isArray(ctrl.value)) {\n      files = [ctrl.value];\n    }\n\n    if (!files.length) return null;\n\n    const add = (a, b) => a + b;\n\n    const sumSize = files.map(x => x.size).reduce(add);\n\n    if (sumSize > max) {\n      return {\n        maxSize: true\n      };\n    }\n\n    return null;\n  };\n}\n/**\r\n *\r\n * @param accept Allowable type of file\r\n */\n\n\nfunction AcceptValidator(accept) {\n  return ctrl => {\n    if (!accept) {\n      throw 'AcceptValidator: allowable type of file can not be empty';\n    }\n\n    if (ctrl.value == null) return null;\n\n    if (!accept.includes(ctrl.value.type)) {\n      return {\n        accept: true\n      };\n    }\n\n    return null;\n  };\n}\n/*\r\n * Public API Surface of file-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AcceptValidator, MaxSizeValidator, NgxMatFileInputComponent, NgxMatFileInputIcon, NgxMatFileInputModule, calculFileSize };","map":{"version":3,"sources":["C:/Users/phong/Desktop/Beetsoft-Management-System-phong-developer/ClientAngular/node_modules/@angular-material-components/file-input/fesm2015/angular-material-components-file-input.mjs"],"names":["coerceBooleanProperty","i0","Directive","forwardRef","Component","ViewEncapsulation","Optional","Self","ViewChild","ContentChild","Input","NgModule","i3","mixinErrorState","i6","MatFormFieldControl","MatFormFieldModule","Subject","i1","i2","i4","MatButtonModule","i5","MatIconModule","i7","CommonModule","MatInputModule","nextUniqueId","_NgxMatInputMixinBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","NgxMatFileInputIcon","ɵfac","ɵdir","type","args","selector","NgxMatFileInputComponent","_elementRef","_platform","_cd","color","fileNames","_uid","stateChanges","focused","controlType","autofilled","_onTouched","_onChange","_disabled","_multiple","placeholder","separator","_required","_readonly","id","valueAccessor","disabled","value","next","_id","multiple","required","_value","readonly","accept","_accept","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","writeValue","_updateInputValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focus","options","_inputValueRef","nativeElement","_focusChanged","isFocused","_markAsTouched","markForCheck","_isBadInput","validity","badInput","empty","shouldLabelFloat","setDescribedByIds","ids","_ariaDescribedby","join","openFilePicker","event","_inputFileRef","click","preventDefault","stopPropagation","handleFiles","filelist","length","files","Array","i","push","item","_resetInputFile","onContainerClick","text","isArray","map","x","name","ElementRef","Platform","ChangeDetectorRef","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","ɵcmp","provide","useExisting","MatButton","MatSuffix","NgIf","MatIcon","encapsulation","None","host","providers","exportAs","template","styles","decorators","static","_customIcon","errorStateMatcher","NgxMatFileInputModule","ɵmod","ɵinj","declarations","imports","exports","calculFileSize","number","toFixed","MaxSizeValidator","max","ctrl","Number","isNaN","add","a","b","sumSize","size","reduce","maxSize","AcceptValidator","includes"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, forwardRef, Component, ViewEncapsulation, Optional, Self, ViewChild, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/forms';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\n\nlet nextUniqueId = 0;\r\nconst _NgxMatInputMixinBase = mixinErrorState(class {\r\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \r\n    /** @docs-private */\r\n    ngControl) {\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n    }\r\n});\r\nclass NgxMatFileInputIcon {\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxMatFileInputIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ /** @nocollapse */ NgxMatFileInputIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: NgxMatFileInputIcon, selector: \"[ngxMatFileInputIcon]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputIcon, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxMatFileInputIcon]'\r\n                }]\r\n        }] });\r\nclass NgxMatFileInputComponent extends _NgxMatInputMixinBase {\r\n    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\r\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this._elementRef = _elementRef;\r\n        this._platform = _platform;\r\n        this._cd = _cd;\r\n        this.ngControl = ngControl;\r\n        this.color = 'primary';\r\n        this.fileNames = null;\r\n        this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\r\n        this.stateChanges = new Subject();\r\n        this.focused = false;\r\n        this.controlType = 'ngx-mat-file-input';\r\n        this.autofilled = false;\r\n        /** Function when touched */\r\n        this._onTouched = () => { };\r\n        /** Function when changed */\r\n        this._onChange = () => { };\r\n        this._disabled = false;\r\n        this._multiple = false;\r\n        this.placeholder = 'Choose a file';\r\n        this.separator = ',';\r\n        this._required = false;\r\n        this._readonly = true;\r\n        this.id = this.id;\r\n        if (this.ngControl) {\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n    }\r\n    get disabled() {\r\n        if (this.ngControl && this.ngControl.disabled !== null) {\r\n            return this.ngControl.disabled;\r\n        }\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        if (this.focused) {\r\n            this.focused = false;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    get id() { return this._id; }\r\n    set id(value) { this._id = value || this._uid; }\r\n    get multiple() { return this._multiple; }\r\n    set multiple(value) {\r\n        this._multiple = coerceBooleanProperty(value);\r\n    }\r\n    get required() { return this._required; }\r\n    set required(value) { this._required = coerceBooleanProperty(value); }\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        this._value = value;\r\n    }\r\n    get readonly() { return this._readonly; }\r\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\r\n    /**\r\n     * Limiting accepted file types\r\n     * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" — Accept PNG or JPEG files.\r\n     */\r\n    get accept() { return this._accept; }\r\n    set accept(value) {\r\n        this._accept = value;\r\n    }\r\n    ngOnChanges() {\r\n        this.stateChanges.next();\r\n    }\r\n    ngOnDestroy() {\r\n        this.stateChanges.complete();\r\n    }\r\n    ngDoCheck() {\r\n        if (this.ngControl) {\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        this._updateInputValue(value);\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this.stateChanges.next();\r\n    }\r\n    /** Focuses the input. */\r\n    focus(options) {\r\n        this._inputValueRef.nativeElement.focus(options);\r\n    }\r\n    _focusChanged(isFocused) {\r\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\r\n            this.focused = isFocused;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /** Mark the field as touched */\r\n    _markAsTouched() {\r\n        this._onTouched();\r\n        this._cd.markForCheck();\r\n        this.stateChanges.next();\r\n    }\r\n    _isBadInput() {\r\n        let validity = this._inputValueRef.nativeElement.validity;\r\n        return validity && validity.badInput;\r\n    }\r\n    get empty() {\r\n        return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&\r\n            !this.autofilled;\r\n    }\r\n    get shouldLabelFloat() {\r\n        return this.focused || !this.empty;\r\n    }\r\n    setDescribedByIds(ids) {\r\n        this._ariaDescribedby = ids.join(' ');\r\n    }\r\n    openFilePicker(event) {\r\n        this._inputFileRef.nativeElement.click();\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        this._markAsTouched();\r\n    }\r\n    handleFiles(filelist) {\r\n        if (filelist.length > 0) {\r\n            const files = new Array();\r\n            for (let i = 0; i < filelist.length; i++) {\r\n                files.push(filelist.item(i));\r\n            }\r\n            this._updateInputValue(files);\r\n            this._resetInputFile();\r\n            this._onChange(this.multiple ? files : files[0]);\r\n        }\r\n    }\r\n    /** Handles a click on the control's container. */\r\n    onContainerClick(event) { }\r\n    ;\r\n    _resetInputFile() {\r\n        this._inputFileRef.nativeElement.value = \"\";\r\n    }\r\n    _updateInputValue(files) {\r\n        let text = null;\r\n        if (files) {\r\n            if (Array.isArray(files)) {\r\n                text = this._multiple\r\n                    ? files.map(x => x.name).join(this.separator)\r\n                    : files[0].name;\r\n            }\r\n            else {\r\n                text = files.name != null ? files.name : null;\r\n            }\r\n        }\r\n        this._inputValueRef.nativeElement.value = text;\r\n    }\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxMatFileInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputComponent, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.ChangeDetectorRef }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ /** @nocollapse */ NgxMatFileInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.1\", type: NgxMatFileInputComponent, selector: \"ngx-mat-file-input\", inputs: { color: \"color\", disabled: \"disabled\", id: \"id\", multiple: \"multiple\", placeholder: \"placeholder\", separator: \"separator\", required: \"required\", errorStateMatcher: \"errorStateMatcher\", value: \"value\", readonly: \"readonly\", accept: \"accept\" }, host: { classAttribute: \"ngx-mat-file-input\" }, providers: [\r\n        { provide: MatFormFieldControl, useExisting: forwardRef((() => NgxMatFileInputComponent)) }\r\n    ], queries: [{ propertyName: \"_customIcon\", first: true, predicate: NgxMatFileInputIcon, descendants: true }], viewQueries: [{ propertyName: \"_inputFileRef\", first: true, predicate: [\"inputFile\"], descendants: true, static: true }, { propertyName: \"_inputValueRef\", first: true, predicate: [\"inputValue\"], descendants: true, static: true }], exportAs: [\"ngx-mat-file-input\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"], components: [{ type: i4.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { type: i5.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], directives: [{ type: i6.MatSuffix, selector: \"[matSuffix]\" }, { type: i7.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-file-input', encapsulation: ViewEncapsulation.None, host: {\r\n                        'class': 'ngx-mat-file-input'\r\n                    }, providers: [\r\n                        { provide: MatFormFieldControl, useExisting: forwardRef((() => NgxMatFileInputComponent)) }\r\n                    ], exportAs: 'ngx-mat-file-input', template: \"<input #inputValue autocomplete=\\\"off\\\" class=\\\"mat-input-element mat-form-field-autofill-control\\\" [attr.id]='id'\\r\\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\\r\\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\\r\\n  [attr.aria-required]='required.toString()'>\\r\\n<div class=\\\"mat-form-field-suffix\\\">\\r\\n  <button matSuffix mat-icon-button [color]=\\\"color\\\" class=\\\"button-browse\\\"  (click)=\\\"openFilePicker($event)\\\" type=\\\"button\\\"\\r\\n   [disabled]=\\\"disabled\\\">\\r\\n    <mat-icon *ngIf=\\\"!_customIcon\\\" class=\\\"ngx-mat-file-input--default-icon\\\">attach_file</mat-icon>\\r\\n    <ng-content select=\\\"[ngxMatFileInputIcon]\\\"></ng-content>\\r\\n  </button>\\r\\n</div>\\r\\n<input type=\\\"file\\\" #inputFile (change)=\\\"handleFiles($event.target.files)\\\" class=\\\"input-file\\\"\\r\\n  [multiple]=\\\"multiple\\\" [accept]=\\\"accept\\\">\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"] }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.ChangeDetectorRef }, { type: i2.NgControl, decorators: [{\r\n                        type: Optional\r\n                    }, {\r\n                        type: Self\r\n                    }] }, { type: i2.NgForm, decorators: [{\r\n                        type: Optional\r\n                    }] }, { type: i2.FormGroupDirective, decorators: [{\r\n                        type: Optional\r\n                    }] }, { type: i3.ErrorStateMatcher }];\r\n    }, propDecorators: { _inputFileRef: [{\r\n                type: ViewChild,\r\n                args: ['inputFile', { static: true }]\r\n            }], _inputValueRef: [{\r\n                type: ViewChild,\r\n                args: ['inputValue', { static: true }]\r\n            }], _customIcon: [{\r\n                type: ContentChild,\r\n                args: [NgxMatFileInputIcon]\r\n            }], color: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], id: [{\r\n                type: Input\r\n            }], multiple: [{\r\n                type: Input\r\n            }], placeholder: [{\r\n                type: Input\r\n            }], separator: [{\r\n                type: Input\r\n            }], required: [{\r\n                type: Input\r\n            }], errorStateMatcher: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input\r\n            }], readonly: [{\r\n                type: Input\r\n            }], accept: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatFileInputModule {\r\n}\r\n/** @nocollapse */ /** @nocollapse */ NgxMatFileInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ /** @nocollapse */ NgxMatFileInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputModule, declarations: [NgxMatFileInputComponent,\r\n        NgxMatFileInputIcon], imports: [CommonModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatFormFieldModule,\r\n        MatInputModule], exports: [NgxMatFileInputComponent,\r\n        NgxMatFileInputIcon] });\r\n/** @nocollapse */ /** @nocollapse */ NgxMatFileInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputModule, imports: [[\r\n            CommonModule,\r\n            MatButtonModule,\r\n            MatIconModule,\r\n            MatFormFieldModule,\r\n            MatInputModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: NgxMatFileInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxMatFileInputComponent,\r\n                        NgxMatFileInputIcon\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        MatButtonModule,\r\n                        MatIconModule,\r\n                        MatFormFieldModule,\r\n                        MatInputModule\r\n                    ],\r\n                    exports: [\r\n                        NgxMatFileInputComponent,\r\n                        NgxMatFileInputIcon\r\n                    ]\r\n                }]\r\n        }] });\n\nfunction calculFileSize(number) {\r\n    if (number < 1024) {\r\n        return number + 'bytes';\r\n    }\r\n    else if (number >= 1024 && number < 1048576) {\r\n        return (number / 1024).toFixed(1) + 'KB';\r\n    }\r\n    else if (number >= 1048576) {\r\n        return (number / 1048576).toFixed(1) + 'MB';\r\n    }\r\n}\n\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\r\nfunction MaxSizeValidator(max) {\r\n    return (ctrl) => {\r\n        max = Number(max);\r\n        if (isNaN(max)) {\r\n            throw 'MaxSizeValidator: max of size of file is invalid';\r\n        }\r\n        if (!ctrl.value)\r\n            return null;\r\n        let files = ctrl.value;\r\n        if (!Array.isArray(ctrl.value)) {\r\n            files = [ctrl.value];\r\n        }\r\n        if (!files.length)\r\n            return null;\r\n        const add = (a, b) => a + b;\r\n        const sumSize = files.map(x => x.size).reduce(add);\r\n        if (sumSize > max) {\r\n            return {\r\n                maxSize: true\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n}\n\n/**\r\n *\r\n * @param accept Allowable type of file\r\n */\r\nfunction AcceptValidator(accept) {\r\n    return (ctrl) => {\r\n        if (!accept) {\r\n            throw ('AcceptValidator: allowable type of file can not be empty');\r\n        }\r\n        if (ctrl.value == null)\r\n            return null;\r\n        if (!accept.includes(ctrl.value.type)) {\r\n            return {\r\n                accept: true\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n}\n\n/*\r\n * Public API Surface of file-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AcceptValidator, MaxSizeValidator, NgxMatFileInputComponent, NgxMatFileInputIcon, NgxMatFileInputModule, calculFileSize };\n"]},"metadata":{},"sourceType":"module"}