{"version":3,"file":"angular-material-components-file-input.mjs","sources":["../../../../projects/file-input/src/lib/file-input.component.ts","../../../../projects/file-input/src/lib/file-input.component.html","../../../../projects/file-input/src/lib/file-input.module.ts","../../../../projects/file-input/src/lib/file-input-helper.ts","../../../../projects/file-input/src/lib/validators/max-size.validator.ts","../../../../projects/file-input/src/lib/validators/accept.validator.ts","../../../../projects/file-input/src/public-api.ts","../../../../projects/file-input/src/angular-material-components-file-input.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ChangeDetectorRef, Component, ContentChild, Directive, DoCheck, ElementRef, forwardRef, Input, OnDestroy, Optional, Self, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState, ThemePalette } from '@angular/material/core';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Subject } from 'rxjs';\r\nimport { FileOrArrayFile } from './file-input-type';\r\n\r\nlet nextUniqueId = 0;\r\n\r\nconst _NgxMatInputMixinBase = mixinErrorState(\r\n  class {\r\n    constructor(\r\n      public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n      public _parentForm: NgForm,\r\n      public _parentFormGroup: FormGroupDirective,\r\n      /** @docs-private */\r\n      public ngControl: NgControl,\r\n    ) { }\r\n  },\r\n);\r\n\r\n@Directive({\r\n  selector: '[ngxMatFileInputIcon]'\r\n})\r\nexport class NgxMatFileInputIcon { }\r\n\r\n@Component({\r\n  selector: 'ngx-mat-file-input',\r\n  templateUrl: 'file-input.component.html',\r\n  styleUrls: ['file-input.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': 'ngx-mat-file-input'\r\n  },\r\n  providers: [\r\n    { provide: MatFormFieldControl, useExisting: forwardRef(() => NgxMatFileInputComponent) }\r\n  ],\r\n  exportAs: 'ngx-mat-file-input'\r\n})\r\nexport class NgxMatFileInputComponent extends _NgxMatInputMixinBase implements MatFormFieldControl<FileOrArrayFile>,\r\n  OnDestroy, DoCheck, CanUpdateErrorState, ControlValueAccessor {\r\n\r\n  @ViewChild('inputFile', { static: true }) private _inputFileRef: ElementRef;\r\n  @ViewChild('inputValue', { static: true }) private _inputValueRef: ElementRef;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(NgxMatFileInputIcon) _customIcon: NgxMatFileInputIcon;\r\n\r\n  @Input() color: ThemePalette = 'primary';\r\n\r\n  public fileNames: string = null;\r\n\r\n  protected _uid = `ngx-mat-fileinput-${nextUniqueId++}`;\r\n  protected _previousNativeValue: any;\r\n  _ariaDescribedby: string;\r\n\r\n  readonly stateChanges: Subject<void> = new Subject<void>();\r\n  focused: boolean = false;\r\n  errorState: boolean;\r\n  controlType: string = 'ngx-mat-file-input';\r\n  autofilled: boolean = false;\r\n\r\n  /** Function when touched */\r\n  _onTouched = () => { };\r\n\r\n  /** Function when changed */\r\n  _onChange: (value: FileOrArrayFile) => void = () => { };\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    if (this.ngControl && this.ngControl.disabled !== null) {\r\n      return this.ngControl.disabled;\r\n    }\r\n    return this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    if (this.focused) {\r\n      this.focused = false;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n  protected _disabled = false;\r\n\r\n  @Input()\r\n  get id(): string { return this._id; }\r\n  set id(value: string) { this._id = value || this._uid; }\r\n  protected _id: string;\r\n\r\n  @Input()\r\n  get multiple(): boolean { return this._multiple; }\r\n  set multiple(value: boolean) {\r\n    this._multiple = coerceBooleanProperty(value);\r\n  }\r\n  protected _multiple = false;\r\n\r\n  @Input() placeholder: string = 'Choose a file';\r\n  @Input() separator: string = ',';\r\n\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\r\n  protected _required = false;\r\n\r\n  @Input() errorStateMatcher: ErrorStateMatcher;\r\n\r\n  @Input()\r\n  get value(): FileOrArrayFile { return this._value; }\r\n  set value(value: FileOrArrayFile) {\r\n    this._value = value;\r\n  }\r\n  protected _value: FileOrArrayFile;\r\n\r\n  @Input()\r\n  get readonly(): boolean { return this._readonly; }\r\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\r\n  private _readonly = true;\r\n\r\n  /**\r\n   * Limiting accepted file types\r\n   * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" â€” Accept PNG or JPEG files.\r\n   */\r\n  @Input()\r\n  get accept(): string { return this._accept; }\r\n  set accept(value: string) {\r\n    this._accept = value;\r\n  }\r\n  private _accept: string;\r\n\r\n  constructor(protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\r\n    protected _platform: Platform,\r\n    private _cd: ChangeDetectorRef,\r\n    @Optional() @Self() public ngControl: NgControl,\r\n    @Optional() _parentForm: NgForm,\r\n    @Optional() _parentFormGroup: FormGroupDirective,\r\n    _defaultErrorStateMatcher: ErrorStateMatcher) {\r\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n\r\n    this.id = this.id;\r\n\r\n    if (this.ngControl) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  ngOnChanges() {\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: FileOrArrayFile): void {\r\n    this._updateInputValue(value);\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(options?: FocusOptions): void {\r\n    this._inputValueRef.nativeElement.focus(options);\r\n  }\r\n\r\n  _focusChanged(isFocused: boolean) {\r\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\r\n      this.focused = isFocused;\r\n      this.stateChanges.next();\r\n    }\r\n\r\n  }\r\n\r\n  /** Mark the field as touched */\r\n  _markAsTouched() {\r\n    this._onTouched();\r\n    this._cd.markForCheck();\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  protected _isBadInput() {\r\n    let validity = (this._inputValueRef.nativeElement as HTMLInputElement).validity;\r\n    return validity && validity.badInput;\r\n  }\r\n\r\n  get empty(): boolean {\r\n    return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&\r\n      !this.autofilled;\r\n  }\r\n\r\n  get shouldLabelFloat(): boolean {\r\n    return this.focused || !this.empty;\r\n  }\r\n\r\n  setDescribedByIds(ids: string[]) {\r\n    this._ariaDescribedby = ids.join(' ');\r\n  }\r\n\r\n  openFilePicker(event?: MouseEvent) {\r\n    this._inputFileRef.nativeElement.click();\r\n    if (event) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n    this._markAsTouched();\r\n  }\r\n\r\n  handleFiles(filelist: FileList) {\r\n    if (filelist.length > 0) {\r\n      const files: Array<File> = new Array();\r\n      for (let i = 0; i < filelist.length; i++) {\r\n        files.push(filelist.item(i));\r\n      }\r\n      this._updateInputValue(files);\r\n      this._resetInputFile();\r\n      this._onChange(this.multiple ? files : files[0]);\r\n    }\r\n  }\r\n\r\n  /** Handles a click on the control's container. */\r\n  onContainerClick(event: MouseEvent) { };\r\n\r\n  private _resetInputFile() {\r\n    this._inputFileRef.nativeElement.value = \"\";\r\n  }\r\n\r\n  private _updateInputValue(files: FileOrArrayFile) {\r\n    let text = null;\r\n    if (files) {\r\n      if (Array.isArray(files)) {\r\n        text = this._multiple\r\n          ? files.map(x => x.name).join(this.separator)\r\n          : files[0].name;\r\n      } else {\r\n        text = files.name != null ? files.name : null;\r\n      }\r\n    }\r\n\r\n    this._inputValueRef.nativeElement.value = text;\r\n  }\r\n\r\n}\r\n","<input #inputValue autocomplete=\"off\" class=\"mat-input-element mat-form-field-autofill-control\" [attr.id]='id'\r\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\r\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\r\n  [attr.aria-required]='required.toString()'>\r\n<div class=\"mat-form-field-suffix\">\r\n  <button matSuffix mat-icon-button [color]=\"color\" class=\"button-browse\"  (click)=\"openFilePicker($event)\" type=\"button\"\r\n   [disabled]=\"disabled\">\r\n    <mat-icon *ngIf=\"!_customIcon\" class=\"ngx-mat-file-input--default-icon\">attach_file</mat-icon>\r\n    <ng-content select=\"[ngxMatFileInputIcon]\"></ng-content>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #inputFile (change)=\"handleFiles($event.target.files)\" class=\"input-file\"\r\n  [multiple]=\"multiple\" [accept]=\"accept\">","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatFileInputComponent, NgxMatFileInputIcon } from './file-input.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxMatFileInputComponent,\r\n    NgxMatFileInputIcon\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule\r\n  ],\r\n  exports: [\r\n    NgxMatFileInputComponent,\r\n    NgxMatFileInputIcon\r\n  ]\r\n})\r\nexport class NgxMatFileInputModule { }\r\n","export function calculFileSize(number: number): string {\r\n    if (number < 1024) {\r\n        return number + 'bytes';\r\n    } else if (number >= 1024 && number < 1048576) {\r\n        return (number / 1024).toFixed(1) + 'KB';\r\n    } else if (number >= 1048576) {\r\n        return (number / 1048576).toFixed(1) + 'MB';\r\n    }\r\n}","import { AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';\r\n\r\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\r\nexport function MaxSizeValidator(max: number): ValidatorFn {\r\n    return (ctrl: AbstractControl): ValidationErrors | null => {\r\n        max = Number(max);\r\n        if (isNaN(max)) {\r\n            throw 'MaxSizeValidator: max of size of file is invalid';\r\n        }\r\n        if (!ctrl.value) return null;\r\n        let files: File[] = ctrl.value;\r\n        if (!Array.isArray(ctrl.value)) {\r\n            files = [ctrl.value];\r\n        }\r\n        if(!files.length) return null;\r\n        const add = (a: any, b: any): number => a + b;\r\n        const sumSize = files.map(x => x.size).reduce(add);\r\n        if (sumSize > max) {\r\n            return {\r\n                maxSize: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}","import { AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';\r\n\r\n/**\r\n * \r\n * @param accept Allowable type of file\r\n */\r\nexport function AcceptValidator(accept: string): ValidatorFn {\r\n    return (ctrl: AbstractControl): ValidationErrors | null => {\r\n        if (!accept) {\r\n            throw ('AcceptValidator: allowable type of file can not be empty');\r\n        }\r\n\r\n        if (ctrl.value == null) return null;\r\n\r\n        if (!accept.includes(ctrl.value.type)) {\r\n            return {\r\n                accept: true\r\n            };\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n}","/*\r\n * Public API Surface of file-input\r\n */\r\n\r\nexport * from './lib/file-input.component';\r\nexport * from './lib/file-input.module';\r\nexport * from './lib/file-input-type';\r\nexport * from './lib/file-input-helper';\r\nexport * from './lib/validators';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}