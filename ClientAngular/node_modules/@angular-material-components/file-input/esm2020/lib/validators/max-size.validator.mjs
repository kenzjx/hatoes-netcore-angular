/**
 * Validator for size of file
 * @param max Max of size of file (in bytes)
 */
export function MaxSizeValidator(max) {
    return (ctrl) => {
        max = Number(max);
        if (isNaN(max)) {
            throw 'MaxSizeValidator: max of size of file is invalid';
        }
        if (!ctrl.value)
            return null;
        let files = ctrl.value;
        if (!Array.isArray(ctrl.value)) {
            files = [ctrl.value];
        }
        if (!files.length)
            return null;
        const add = (a, b) => a + b;
        const sumSize = files.map(x => x.size).reduce(add);
        if (sumSize > max) {
            return {
                maxSize: true
            };
        }
        return null;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LXNpemUudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZmlsZS1pbnB1dC9zcmMvbGliL3ZhbGlkYXRvcnMvbWF4LXNpemUudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7R0FHRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXO0lBQ3hDLE9BQU8sQ0FBQyxJQUFxQixFQUEyQixFQUFFO1FBQ3RELEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDWixNQUFNLGtEQUFrRCxDQUFDO1NBQzVEO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDN0IsSUFBSSxLQUFLLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsSUFBRyxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDOUIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFVLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELElBQUksT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNmLE9BQU87Z0JBQ0gsT0FBTyxFQUFFLElBQUk7YUFDaEIsQ0FBQztTQUNMO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFBO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdG9yRm4sIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG4vKipcclxuICogVmFsaWRhdG9yIGZvciBzaXplIG9mIGZpbGVcclxuICogQHBhcmFtIG1heCBNYXggb2Ygc2l6ZSBvZiBmaWxlIChpbiBieXRlcylcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBNYXhTaXplVmFsaWRhdG9yKG1heDogbnVtYmVyKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjdHJsOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcbiAgICAgICAgbWF4ID0gTnVtYmVyKG1heCk7XHJcbiAgICAgICAgaWYgKGlzTmFOKG1heCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgJ01heFNpemVWYWxpZGF0b3I6IG1heCBvZiBzaXplIG9mIGZpbGUgaXMgaW52YWxpZCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghY3RybC52YWx1ZSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgbGV0IGZpbGVzOiBGaWxlW10gPSBjdHJsLnZhbHVlO1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjdHJsLnZhbHVlKSkge1xyXG4gICAgICAgICAgICBmaWxlcyA9IFtjdHJsLnZhbHVlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIWZpbGVzLmxlbmd0aCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgY29uc3QgYWRkID0gKGE6IGFueSwgYjogYW55KTogbnVtYmVyID0+IGEgKyBiO1xyXG4gICAgICAgIGNvbnN0IHN1bVNpemUgPSBmaWxlcy5tYXAoeCA9PiB4LnNpemUpLnJlZHVjZShhZGQpO1xyXG4gICAgICAgIGlmIChzdW1TaXplID4gbWF4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtYXhTaXplOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59Il19